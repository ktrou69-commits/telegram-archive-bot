import os
import logging
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Document
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)
from telegram.constants import ParseMode
from dotenv import load_dotenv

from database import DatabaseManager
from utils import format_file_size, is_allowed_file_type, sanitize_filename, create_file_info_text, download_file_from_url, is_valid_url, escape_markdown, AntiSpam

# Load environment variables
load_dotenv()

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Conversation states
WAITING_FOR_NAME, WAITING_FOR_DESCRIPTION, WAITING_FOR_URL, WAITING_FOR_URL_NAME, WAITING_FOR_URL_DESCRIPTION, WAITING_FOR_BROADCAST, WAITING_FOR_ADMIN_COMMAND = range(7)

class ArchiveBot:
    def __init__(self):
        self.db = DatabaseManager()
        self.user_upload_data: Dict[int, Dict[str, Any]] = {}
        self.admin_id = int(os.getenv('ADMIN_USER_ID', 0))
        self.antispam = AntiSpam()
    
    async def check_antispam(self, update: Update, command: str = "general") -> bool:
        """Check antispam and send warning if needed"""
        user_id = update.effective_user.id
        
        # Skip antispam for admin
        if user_id == self.admin_id:
            return True
        
        # Periodic cleanup (fallback if JobQueue is not available)
        import random
        if random.randint(1, 100) == 1:  # 1% chance to cleanup on each request
            try:
                self.antispam.cleanup_old_data()
            except Exception as e:
                logger.error(f"Manual antispam cleanup failed: {e}")
        
        allowed, message = self.antispam.is_allowed(user_id, command)
        
        if not allowed:
            logger.warning(f"Antispam blocked user {user_id} for command {command}: {message}")
            
            # Send warning message
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            warning_text = (
                f"üö´ **–ê–Ω—Ç–∏—Å–ø–∞–º –∑–∞—â–∏—Ç–∞**\n\n"
                f"‚ùå {message}\n\n"
                f"üí° **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç —É–º–µ—Ä–µ–Ω–Ω–æ:**\n"
                f"‚Ä¢ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ\n"
                f"‚Ä¢ –ù–µ —Å–ø–∞–º—å—Ç–µ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π\n"
                f"‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏\n\n"
                f"‚è∞ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–Ω–∏–º–µ—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
            )
            
            try:
                if hasattr(update, 'callback_query') and update.callback_query:
                    await update.callback_query.answer(f"üö´ {message}", show_alert=True)
                else:
                    await update.message.reply_text(
                        warning_text,
                        reply_markup=reply_markup,
                        parse_mode=ParseMode.MARKDOWN
                    )
            except Exception as e:
                logger.error(f"Error sending antispam warning: {e}")
            
            return False
        
        return True
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start command handler"""
        # Check antispam
        if not await self.check_antispam(update, "start"):
            return
        
        user = update.effective_user
        self.db.add_user(user.id, user.username, user.first_name, user.last_name)
        
        # Get categories for quick access
        categories = self.db.get_categories()
        
        keyboard = []
        
        # Quick upload buttons for popular categories
        keyboard.append([InlineKeyboardButton("‚ö° –ë–´–°–¢–†–ê–Ø –ó–ê–ì–†–£–ó–ö–ê", callback_data="noop")])
        
        quick_categories = []
        for cat_id, name, desc, icon, files_count in categories[:6]:  # Top 6 categories
            if name in ["–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è", "–ö–æ–Ω—Å–ø–µ–∫—Ç—ã", "–ü—Ä–æ–µ–∫—Ç—ã", "–ú–µ–¥–∏–∞", "–î–æ–∫—É–º–µ–Ω—Ç—ã", "–ê—Ä—Ö–∏–≤—ã"]:
                quick_categories.append(InlineKeyboardButton(
                    f"{icon} {name}", 
                    callback_data=f"quick_upload_{cat_id}"
                ))
        
        # Arrange quick buttons in rows of 2
        for i in range(0, len(quick_categories), 2):
            row = quick_categories[i:i+2]
            keyboard.append(row)
        
        # Navigation section
        keyboard.append([InlineKeyboardButton("üóÇÔ∏è –ù–ê–í–ò–ì–ê–¶–ò–Ø", callback_data="noop")])
        keyboard.extend([
            [InlineKeyboardButton("üìÇ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"), 
             InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤", callback_data="search")],
            [InlineKeyboardButton("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã", callback_data="recent"), 
             InlineKeyboardButton("üë§ –ú–æ–∏ —Ñ–∞–π–ª—ã", callback_data="my_files")]
        ])
        
        # Additional options
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û", callback_data="noop")])
        keyboard.extend([
            [InlineKeyboardButton("üîó –°–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ", callback_data="url_download"), 
             InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
        ])
        
        # Add admin panel for admin user
        if user.id == self.admin_id:
            keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = (
            "üóÉÔ∏è **–ê—Ä—Ö–∏–≤-–±–æ—Ç 2.0** - –í–∞—à —É–º–Ω—ã–π —Ñ–∞–π–ª–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫\n\n"
            "‚ö° **–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞** - –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º\n"
            "üóÇÔ∏è **–£–º–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è** - –≤—Å–µ –ø–æ–¥ —Ä—É–∫–æ–π\n"
            "üîç **–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫** - –Ω–∞–π–¥–∏—Ç–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ\n\n"
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ä—Ö–∏–≤–∞:**\n"
        )
        
        # Add archive statistics
        try:
            stats = self.db.get_stats()
            total_files = stats.get('total_files', 0)
            total_categories = len(categories)
            
            welcome_text += (
                f"üìÅ –§–∞–π–ª–æ–≤: **{total_files}** ‚Ä¢ üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: **{total_categories}**\n\n"
                "üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:**"
            )
        except:
            welcome_text += "üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:**"
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle inline keyboard buttons"""
        query = update.callback_query
        logger.info(f"Button pressed: {query.data}")
        
        # Check antispam for button clicks
        if not await self.check_antispam(update, f"button_{query.data}"):
            return
        
        await query.answer()
        
        if query.data == "upload":
            await self.upload_prompt(query, context)
        elif query.data == "url_download":
            await self.url_download_prompt(query, context)
        elif query.data == "categories":
            await self.show_categories(query, context)
        elif query.data == "search":
            await self.search_prompt(query, context)
        elif query.data == "recent":
            await self.show_recent_files(query, context)
        elif query.data == "stats":
            await self.show_stats(query, context)
        elif query.data == "my_files":
            await self.show_user_files(query, context)
        elif query.data == "admin_panel":
            await self.show_admin_panel(query, context)
        elif query.data.startswith("download_"):
            try:
                file_id = int(query.data.split("_")[1])
                logger.info(f"Download request for file_id: {file_id}")
                await self.download_file(query, context, file_id)
            except Exception as e:
                logger.error(f"Error processing download button: {e}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        elif query.data.startswith("delete_"):
            try:
                file_id = int(query.data.split("_")[1])
                logger.info(f"Delete request for file_id: {file_id}")
                await self.confirm_delete(query, context, file_id)
            except Exception as e:
                logger.error(f"Error processing delete button: {e}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        elif query.data.startswith("confirm_delete_"):
            try:
                file_id = int(query.data.split("_")[2])
                logger.info(f"Confirmed delete for file_id: {file_id}")
                await self.delete_file(query, context, file_id)
            except Exception as e:
                logger.error(f"Error processing confirm delete: {e}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        elif query.data.startswith("cancel_delete_"):
            try:
                await self.show_user_files(query, context)
            except Exception as e:
                logger.error(f"Error canceling delete: {e}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ", show_alert=True)
        elif query.data.startswith("user_files_page_"):
            try:
                page = int(query.data.split("_")[-1])
                await self.show_user_files(query, context, page)
            except Exception as e:
                logger.error(f"Error navigating user files: {e}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)
        elif query.data.startswith("recent_page_"):
            try:
                page = int(query.data.split("_")[-1])
                await self.show_recent_files(query, context, page)
            except Exception as e:
                logger.error(f"Error navigating recent files: {e}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)
        elif query.data.startswith("search_page_"):
            try:
                page = int(query.data.split("_")[-1])
                # Need to store search results in context for pagination
                await query.answer("–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            except Exception as e:
                logger.error(f"Error navigating search results: {e}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)
        elif query.data == "noop":
            # Do nothing for counter button
            await query.answer()
        elif query.data == "back_to_menu":
            await self.back_to_menu(query, context)
        elif query.data == "admin_broadcast":
            await self.admin_broadcast_prompt(query, context)
        elif query.data == "admin_stats":
            await self.admin_detailed_stats(query, context)
        elif query.data == "admin_users":
            await self.admin_user_management(query, context)
        elif query.data == "admin_files":
            await self.admin_file_management(query, context)
        elif query.data == "admin_cleanup":
            await self.admin_cleanup_files(query, context)
        elif query.data.startswith("copy_name_"):
            try:
                file_id = int(query.data.split("_")[2])
                await self.copy_filename(query, context, file_id)
            except Exception as e:
                logger.error(f"Error copying filename: {e}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–º–µ–Ω–∏", show_alert=True)
        elif query.data.startswith("category_"):
            try:
                category_id = int(query.data.split("_")[1])
                await self.show_category_files(query, context, category_id)
            except Exception as e:
                logger.error(f"Error showing category files: {e}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", show_alert=True)
        elif query.data == "create_category":
            await self.create_category_prompt(query, context)
        elif query.data.startswith("delete_category_"):
            try:
                category_id = int(query.data.split("_")[2])
                await self.delete_category_confirm(query, context, category_id)
            except Exception as e:
                logger.error(f"Error deleting category: {e}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", show_alert=True)
        elif query.data.startswith("select_category_"):
            try:
                category_id = int(query.data.split("_")[2])
                context.user_data['selected_category'] = category_id
                await query.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞!")
                # Continue with file upload process
                await self.upload_prompt(query, context)
            except Exception as e:
                logger.error(f"Error selecting category: {e}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", show_alert=True)
        elif query.data.startswith("quick_upload_"):
            try:
                category_id = int(query.data.split("_")[2])
                context.user_data['selected_category'] = category_id
                await self.quick_upload_prompt(query, context, category_id)
            except Exception as e:
                logger.error(f"Error with quick upload: {e}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–µ", show_alert=True)
        else:
            logger.warning(f"Unknown button data: {query.data}")
    
    async def upload_prompt(self, query, context):
        """Prompt user to upload a file"""
        # Check if category is already selected
        if 'selected_category' not in context.user_data:
            await self.show_category_selection(query, context, "upload")
            return
            
        # Show category info and upload instructions
        category_id = context.user_data['selected_category']
        category = self.db.get_category_by_id(category_id)
        
        if category:
            category_name = category[1]
            category_icon = category[3]
        else:
            category_name = "–û–±—â–∏–µ"
            category_icon = "üìÅ"
        
        text = (
            f"üì§ **–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é**\n\n"
            f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category_icon} {category_name}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª **–õ–Æ–ë–û–ì–û –§–û–†–ú–ê–¢–ê**, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤.\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 4 –ì–ë\n\n"
            "‚úÖ **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –í–°–ï —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
            "‚Ä¢ üì∏ –§–æ—Ç–æ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä—è–º–æ –≤ —á–∞—Ç)\n"
            "‚Ä¢ üé• –í–∏–¥–µ–æ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä—è–º–æ –≤ —á–∞—Ç)\n"
            "‚Ä¢ üéµ –ê—É–¥–∏–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –ª—é–±—ã—Ö —Ç–∏–ø–æ–≤\n"
            "‚Ä¢ üì¶ –ê—Ä—Ö–∏–≤—ã, –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã (.exe, .bat)\n"
            "‚Ä¢ üîß –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìÇ –°–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="categories")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def quick_upload_prompt(self, query, context, category_id):
        """Quick upload prompt for specific category"""
        category = self.db.get_category_by_id(category_id)
        
        if category:
            category_name = category[1]
            category_icon = category[3]
            category_desc = category[2]
            files_count = category[4]
        else:
            category_name = "–û–±—â–∏–µ"
            category_icon = "üìÅ"
            category_desc = "–û–±—â–∏–µ —Ñ–∞–π–ª—ã"
            files_count = 0
        
        text = (
            f"‚ö° **–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é**\n\n"
            f"{category_icon} **{category_name}** ({files_count} —Ñ–∞–π–ª–æ–≤)\n"
            f"üí¨ _{category_desc}_\n\n"
            "üì§ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:**\n"
            "‚Ä¢ üì∏ –§–æ—Ç–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            "‚Ä¢ üé• –í–∏–¥–µ–æ —Ñ–∞–π–ª—ã\n"
            "‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ç–µ–∫—Å—Ç—ã\n"
            "‚Ä¢ üéµ –ê—É–¥–∏–æ –∏ –º—É–∑—ã–∫–∞\n"
            "‚Ä¢ üì¶ –ê—Ä—Ö–∏–≤—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n"
            "‚Ä¢ üîß –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã\n\n"
            "üí° **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:** 4 –ì–ë"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìÇ –°–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="categories")],
            [InlineKeyboardButton("üóÇÔ∏è –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"), 
             InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle uploaded documents"""
        # Check antispam for file uploads
        if not await self.check_antispam(update, "upload_file"):
            return
        
        user_id = update.effective_user.id
        document = update.message.document
        
        # Check file type and size
        is_allowed, error_msg = is_allowed_file_type(document.file_name)
        if not is_allowed:
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚ùå {error_msg}",
                reply_markup=reply_markup
            )
            return
        
        if document.file_size > 4 * 1024 * 1024 * 1024:  # 4 GB
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 4 –ì–ë\nüí° –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ—á–∞—Å—Ç–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É",
                reply_markup=reply_markup
            )
            return
        
        # Get selected category or default to "–û–±—â–∏–µ"
        category_id = context.user_data.get('selected_category', 1)
        
        # Store file info temporarily
        self.user_upload_data[user_id] = {
            'file_id': document.file_id,
            'original_name': document.file_name,
            'file_size': document.file_size,
            'mime_type': document.mime_type,
            'category_id': category_id
        }
        
        await update.message.reply_text(
            f"üìÅ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: **{escape_markdown(document.file_name)}**\n"
            f"üìä –†–∞–∑–º–µ—Ä: {format_file_size(document.file_size)}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞ –≤ –∞—Ä—Ö–∏–≤–µ:",
            parse_mode=ParseMode.MARKDOWN
        )
        
        return WAITING_FOR_NAME
    
    async def handle_file_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle file name input"""
        user_id = update.effective_user.id
        custom_name = sanitize_filename(update.message.text.strip())
        
        if not custom_name:
            await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return WAITING_FOR_NAME
        
        # Check if filename is unique
        if not self.db.is_filename_unique(custom_name):
            suggested_name = self.db.suggest_unique_filename(custom_name)
            await update.message.reply_text(
                f"‚ùå **–§–∞–π–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{escape_markdown(custom_name)}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!**\n\n"
                f"üîí **–ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–¥–¥–µ–ª–æ–∫ –∞–∫—Ç–∏–≤–Ω–∞**\n\n"
                f"üí° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: `{escape_markdown(suggested_name)}`\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                parse_mode=ParseMode.MARKDOWN
            )
            return WAITING_FOR_NAME
        
        self.user_upload_data[user_id]['custom_name'] = custom_name
        
        await update.message.reply_text(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: **{escape_markdown(custom_name)}**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
            parse_mode=ParseMode.MARKDOWN
        )
        
        return WAITING_FOR_DESCRIPTION
    
    async def handle_file_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle file description input"""
        user_id = update.effective_user.id
        description = update.message.text.strip() if update.message.text != "/skip" else ""
        
        # Save file to database
        file_data = self.user_upload_data[user_id]
        file_db_id = self.db.add_file(
            file_data['file_id'],
            file_data['original_name'],
            file_data['custom_name'],
            description,
            file_data['file_size'],
            file_data['mime_type'],
            user_id,
            category_id=file_data.get('category_id', 1)
        )
        
        # Clean up temporary data
        del self.user_upload_data[user_id]
        
        await update.message.reply_text(
            f"‚úÖ **–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤!**\n\n"
            f"üìÅ –ù–∞–∑–≤–∞–Ω–∏–µ: {escape_markdown(file_data['custom_name'])}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {escape_markdown(description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
            f"üÜî ID –≤ –∞—Ä—Ö–∏–≤–µ: {file_db_id}",
            parse_mode=ParseMode.MARKDOWN
        )
        
        return ConversationHandler.END
    
    async def url_download_prompt(self, query, context):
        """Prompt user to enter URL for download"""
        text = (
            "üîó **–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ **–õ–Æ–ë–£–Æ** —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª - –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∞–µ—Ç –µ–≥–æ!\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 4 –ì–ë\n\n"
            "‚úÖ **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:**\n"
            "‚Ä¢ Google Drive, Dropbox, OneDrive\n"
            "‚Ä¢ Yandex.Disk, GitHub, GitLab\n"
            "‚Ä¢ –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã\n"
            "‚Ä¢ –°—Å—ã–ª–∫–∏ —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º–∏\n"
            "‚Ä¢ –û–±–ª–∞—á–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞\n\n"
            "üí° –ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å—Ç–µ –ª—é–±—É—é —Å—Å—ã–ª–∫—É!"
        )
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
        context.user_data['waiting_for_url'] = True
    
    async def handle_url_download(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle URL download"""
        if not context.user_data.get('waiting_for_url'):
            return
        
        user_id = update.effective_user.id
        url = update.message.text.strip()
        
        # Validate URL
        if not is_valid_url(url):
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=reply_markup
            )
            return
        
        # Show downloading message
        downloading_msg = await update.message.reply_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")
        
        try:
            # Download file
            success, error_msg, file_content, filename, file_size = download_file_from_url(url)
            
            if not success:
                await downloading_msg.edit_text(f"‚ùå {error_msg}")
                return
            
            # Upload to Telegram to get file_id
            try:
                from io import BytesIO
                file_obj = BytesIO(file_content)
                file_obj.name = filename
                
                # Send file to get Telegram file_id
                sent_file = await update.message.reply_document(
                    document=file_obj,
                    filename=filename,
                    caption="üìÅ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏–º –µ–≥–æ –≤ –∞—Ä—Ö–∏–≤..."
                )
                
                telegram_file_id = sent_file.document.file_id
                
                # Store file info temporarily
                self.user_upload_data[user_id] = {
                    'file_id': telegram_file_id,
                    'original_name': filename,
                    'file_size': file_size,
                    'mime_type': sent_file.document.mime_type or 'application/octet-stream',
                    'from_url': True,
                    'source_url': url
                }
                
                await downloading_msg.delete()
                await update.message.reply_text(
                    f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: **{escape_markdown(filename)}**\n"
                    f"üìä –†–∞–∑–º–µ—Ä: {format_file_size(file_size)}\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞ –≤ –∞—Ä—Ö–∏–≤–µ:",
                    parse_mode=ParseMode.MARKDOWN
                )
                
                context.user_data['waiting_for_url'] = False
                return WAITING_FOR_URL_NAME
                
            except Exception as e:
                logger.error(f"Error uploading file to Telegram: {e}")
                await downloading_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ Telegram")
                return
                
        except Exception as e:
            logger.error(f"Error in URL download: {e}")
            await downloading_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞")
            return
    
    async def handle_url_file_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle file name input for URL download"""
        user_id = update.effective_user.id
        custom_name = sanitize_filename(update.message.text.strip())
        
        if not custom_name:
            await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return WAITING_FOR_URL_NAME
        
        # Check if filename is unique
        if not self.db.is_filename_unique(custom_name):
            suggested_name = self.db.suggest_unique_filename(custom_name)
            await update.message.reply_text(
                f"‚ùå **–§–∞–π–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{escape_markdown(custom_name)}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!**\n\n"
                f"üîí **–ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–¥–¥–µ–ª–æ–∫ –∞–∫—Ç–∏–≤–Ω–∞**\n\n"
                f"üí° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: `{escape_markdown(suggested_name)}`\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                parse_mode=ParseMode.MARKDOWN
            )
            return WAITING_FOR_URL_NAME
        
        self.user_upload_data[user_id]['custom_name'] = custom_name
        
        await update.message.reply_text(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: **{escape_markdown(custom_name)}**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
            parse_mode=ParseMode.MARKDOWN
        )
        
        return WAITING_FOR_URL_DESCRIPTION
    
    async def handle_url_file_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle file description input for URL download"""
        user_id = update.effective_user.id
        description = update.message.text.strip() if update.message.text != "/skip" else ""
        
        # Save file to database
        file_data = self.user_upload_data[user_id]
        file_db_id = self.db.add_file(
            file_data['file_id'],
            file_data['original_name'],
            file_data['custom_name'],
            description,
            file_data['file_size'],
            file_data['mime_type'],
            user_id,
            category_id=file_data.get('category_id', 1)
        )
        
        # Clean up temporary data
        del self.user_upload_data[user_id]
        
        source_info = f"\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {escape_markdown(file_data.get('source_url', 'URL'))}" if file_data.get('from_url') else ""
        
        await update.message.reply_text(
            f"‚úÖ **–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤!**\n\n"
            f"üìÅ –ù–∞–∑–≤–∞–Ω–∏–µ: {escape_markdown(file_data['custom_name'])}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {escape_markdown(description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
            f"üÜî ID –≤ –∞—Ä—Ö–∏–≤–µ: {file_db_id}{source_info}",
            parse_mode=ParseMode.MARKDOWN
        )
        
        return ConversationHandler.END
    
    async def multipart_upload_prompt(self, query, context):
        """Prompt user for multipart upload"""
        text = (
            "üì¶ **–ú–Ω–æ–≥–æ—á–∞—Å—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞**\n\n"
            "–î–ª—è —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ 4 –ì–ë —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –∏—Ö –Ω–∞ —á–∞—Å—Ç–∏ –∏ –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ –ø–æ –æ—á–µ—Ä–µ–¥–∏.\n\n"
            "**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
            "1. –†–∞–∑–¥–µ–ª–∏—Ç–µ –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –ø–æ–º–æ—â—å—é 7-Zip –∏–ª–∏ WinRAR)\n"
            "2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å\n"
            "3. –£–∫–∞–∂–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π\n"
            "4. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ —Å —Ç–µ–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º\n\n"
            "üí° **–°–æ–≤–µ—Ç:** –ù–∞–∑—ã–≤–∞–π—Ç–µ —á–∞—Å—Ç–∏ –∫–∞–∫ `file.part1`, `file.part2` –∏ —Ç.–¥."
        )
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
        context.user_data['waiting_for_multipart'] = True
    
    async def search_prompt(self, query, context):
        """Prompt user to search files"""
        text = (
            "üîç **–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é —Ñ–∞–π–ª–æ–≤:"
        )
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
        context.user_data['waiting_for_search'] = True
    
    async def handle_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle all text input based on context"""
        # Check antispam for text input
        if not await self.check_antispam(update, "text_input"):
            return
        
        # Handle URL download
        if context.user_data.get('waiting_for_url'):
            await self.handle_url_download(update, context)
            return
        
        # Handle search
        if context.user_data.get('waiting_for_search'):
            await self.handle_search(update, context)
            return
        
        # Handle multipart upload
        if context.user_data.get('waiting_for_multipart'):
            await self.handle_multipart_upload(update, context)
            return
        
        # Handle admin broadcast
        if context.user_data.get('waiting_for_broadcast'):
            await self.handle_broadcast_message(update, context)
            return
        
        # Handle category creation
        if context.user_data.get('creating_category'):
            await self.handle_category_creation(update, context)
            return
    
    async def handle_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle search query"""
        query_text = update.message.text.strip()
        if not query_text:
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
                reply_markup=reply_markup
            )
            return
        
        results = self.db.search_files_grouped(query_text, limit=10)
        
        if not results:
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É **'{escape_markdown(query_text)}'** –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            context.user_data['waiting_for_search'] = False
            return
        
        await self.show_file_results(update.message, results, f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: '{escape_markdown(query_text)}'")
        context.user_data['waiting_for_search'] = False
    
    async def handle_multipart_upload(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle multipart upload instructions"""
        await update.message.reply_text(
            "üì¶ **–ú–Ω–æ–≥–æ—á–∞—Å—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞**\n\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Ñ–∞–π–ª–∞ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç.\n"
            "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —è —Å–ø—Ä–æ—à—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π.",
            parse_mode=ParseMode.MARKDOWN
        )
        context.user_data['waiting_for_multipart'] = False
    
    async def show_recent_files(self, query, context, page=0):
        """Show recently uploaded files with pagination"""
        results = self.db.get_recent_files_grouped(limit=100)  # Get more files
        
        if not results:
            text = "üìã –ê—Ä—Ö–∏–≤ –ø–æ–∫–∞ –ø—É—Å—Ç"
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup)
            return
        
        # Show one file per page
        total_files = len(results)
        if page >= total_files:
            page = 0
        elif page < 0:
            page = total_files - 1
            
        file_info = results[page]
        
        # Handle both old and new format
        if len(file_info) >= 11:  # New grouped format
            file_id, _, custom_name, description, file_size, _, download_count, username, first_name, is_multipart, total_parts, multipart_group_id = file_info[:12]
            multipart_info = f" (üì¶ {total_parts} —á–∞—Å—Ç–µ–π)" if is_multipart else ""
        else:  # Old format
            file_id, _, custom_name, description, file_size, _, download_count, username, first_name = file_info
            multipart_info = ""
            description = description if len(file_info) > 3 else ""
        
        uploader = username or first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        size_str = format_file_size(file_size)
        
        text = (
            f"üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã** ({page + 1}/{total_files})\n\n"
            f"üìÅ **{escape_markdown(custom_name)}**{multipart_info}\n"
            f"üìã `{custom_name}`\n"
            f"üìä –†–∞–∑–º–µ—Ä: {size_str}\n"
        )
        
        if description:
            text += f"üìù {escape_markdown(description)}\n"
        
        text += f"üë§ {escape_markdown(uploader)}\n"
        text += f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–π: {download_count}"
        
        # Navigation and action buttons
        keyboard = []
        
        # Action buttons
        keyboard.append([
            InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å", callback_data=f"download_{file_id}"),
            InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–º—è", callback_data=f"copy_name_{file_id}")
        ])
        
        # Navigation buttons
        nav_buttons = []
        if total_files > 1:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"recent_page_{page-1}"))
            nav_buttons.append(InlineKeyboardButton(f"{page + 1}/{total_files}", callback_data="noop"))
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"recent_page_{page+1}"))
            keyboard.append(nav_buttons)
        
        # Back button
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def show_user_files(self, query, context, page=0):
        """Show user's uploaded files with pagination"""
        user_id = query.from_user.id
        results = self.db.get_user_files(user_id, limit=100)  # Get all files
        
        if not results:
            text = "üë§ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup)
            return
        
        # Show one file per page
        total_files = len(results)
        if page >= total_files:
            page = 0
        elif page < 0:
            page = total_files - 1
            
        file_info = results[page]
        file_id, _, custom_name, description, file_size, uploaded_at, download_count = file_info
        size_str = format_file_size(file_size)
        
        text = (
            f"üë§ **–í–∞—à–∏ —Ñ–∞–π–ª—ã** ({page + 1}/{total_files})\n\n"
            f"üìÅ **{escape_markdown(custom_name)}**\n"
            f"üìã `{custom_name}`\n"
            f"üìä –†–∞–∑–º–µ—Ä: {size_str}\n"
        )
        
        if description:
            text += f"üìù {escape_markdown(description)}\n"
        
        text += f"üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {uploaded_at[:16]}\n"
        text += f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–π: {download_count}"
        
        # Navigation and action buttons
        keyboard = []
        
        # File actions
        keyboard.append([
            InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å", callback_data=f"download_{file_id}"),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{file_id}")
        ])
        keyboard.append([
            InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–º—è", callback_data=f"copy_name_{file_id}")
        ])
        
        # Navigation buttons
        nav_buttons = []
        if total_files > 1:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"user_files_page_{page-1}"))
            nav_buttons.append(InlineKeyboardButton(f"{page + 1}/{total_files}", callback_data="noop"))
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"user_files_page_{page+1}"))
            keyboard.append(nav_buttons)
        
        # Back button
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def show_stats(self, query, context):
        """Show archive statistics"""
        stats = self.db.get_stats()
        
        text = (
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ä—Ö–∏–≤–∞:**\n\n"
            f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats['total_files']}\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"‚¨áÔ∏è –í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: {stats['total_downloads']}\n"
            f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {format_file_size(stats['total_size'])}"
        )
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def download_file(self, query, context, file_id):
        """Handle file download"""
        try:
            file_info = self.db.get_file_by_id(file_id)
            logger.info(f"Downloading file ID: {file_id}, file_info: {file_info}")
            
            if not file_info:
                await query.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # Send immediate feedback
            await query.answer("üì• –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
            
            # Check if it's a multipart file
            if len(file_info) > 9 and file_info[9]:  # is_multipart field exists and is True
                multipart_group_id = file_info[12] if len(file_info) > 12 else None
                if multipart_group_id:
                    # Get all parts
                    parts = self.db.get_multipart_files(multipart_group_id)
                    if parts:
                        for part in parts:
                            try:
                                telegram_file_id = part[1]
                                part_text = f"üì¶ **–ß–∞—Å—Ç—å {part[9]} –∏–∑ {part[10]}**\nüìÅ {part[2]}"
                                await context.bot.send_document(
                                    chat_id=query.message.chat_id,
                                    document=telegram_file_id,
                                    caption=part_text,
                                    parse_mode=ParseMode.MARKDOWN
                                )
                            except Exception as e:
                                logger.error(f"Error sending part {part[9]}: {e}")
                                await context.bot.send_message(
                                    chat_id=query.message.chat_id,
                                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ {part[9]}: {str(e)}"
                                )
                        
                        # Increment download count for the main file
                        self.db.increment_download_count(file_id)
                        return
            
            # Regular single file download
            telegram_file_id = file_info[1]
            custom_name = file_info[2]
            description = file_info[3] if len(file_info) > 3 else ""
            
            # Create simple caption
            caption = f"üìÅ **{custom_name}**"
            if description:
                caption += f"\nüìù {description}"
            
            logger.info(f"Sending file with telegram_file_id: {telegram_file_id}")
            
            await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=telegram_file_id,
                caption=caption,
                parse_mode=ParseMode.MARKDOWN
            )
            
            # Increment download count
            self.db.increment_download_count(file_id)
            
        except Exception as e:
            logger.error(f"Error in download_file: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞", show_alert=True)
            # Also send a message with error details
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
            )
    
    async def confirm_delete(self, query, context, file_id):
        """Show confirmation dialog for file deletion"""
        try:
            # Get file info to show in confirmation
            file_info = self.db.get_file_by_id(file_id)
            if not file_info:
                await query.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            custom_name = file_info[2]
            
            text = (
                f"üóëÔ∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
                f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª:\n"
                f"üìÅ **{escape_markdown(custom_name)}**\n\n"
                f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
            )
            
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{file_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete_{file_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"Error in confirm_delete: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
    
    async def delete_file(self, query, context, file_id):
        """Handle file deletion"""
        try:
            user_id = query.from_user.id
            
            # Try to delete the file
            success = self.db.delete_file(file_id, user_id)
            
            if success:
                await query.answer("‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω!")
                # Refresh the current view
                await self.show_user_files(query, context)
            else:
                await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç.", show_alert=True)
                
        except Exception as e:
            logger.error(f"Error in delete_file: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞", show_alert=True)
    
    async def copy_filename(self, query, context, file_id):
        """Handle filename copying"""
        try:
            # Get file info from database
            file_info = self.db.get_file_by_id(file_id)
            
            if not file_info:
                await query.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            custom_name = file_info[2]  # custom_name is at index 2
            
            # Send filename in a copyable format
            text = (
                f"üìã **–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:**\n\n"
                f"`{custom_name}`\n\n"
                f"üí° **–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–º—è —Ñ–∞–π–ª–∞ –≤—ã—à–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ**\n\n"
                f"üì± –ù–∞ –º–æ–±–∏–ª—å–Ω–æ–º: –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ‚Üí –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å\n"
                f"üíª –ù–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ: –≤—ã–¥–µ–ª–∏—Ç—å ‚Üí Ctrl+C"
            )
            
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # Send as new message for easy copying
            await query.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            
            await query.answer("üìã –ò–º—è —Ñ–∞–π–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è!")
            
        except Exception as e:
            logger.error(f"Error in copy_filename: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞", show_alert=True)
    
    async def show_file_results(self, message, results, title, page=0):
        """Show file search results with pagination"""
        if not results:
            await message.reply_text(f"**{escape_markdown(title)}**\n\n–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        # Show one file per page
        total_files = len(results)
        if page >= total_files:
            page = 0
        elif page < 0:
            page = total_files - 1
            
        file_info = results[page]
        
        # Handle both old and new format
        if len(file_info) >= 11:  # New grouped format
            file_id, _, custom_name, description, file_size, _, download_count, username, first_name, is_multipart, total_parts, multipart_group_id = file_info[:12]
            multipart_info = f" (üì¶ {total_parts} —á–∞—Å—Ç–µ–π)" if is_multipart else ""
        else:  # Old format
            file_id, _, custom_name, description, file_size, _, download_count, username, first_name = file_info
            multipart_info = ""
        
        uploader = username or first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        size_str = format_file_size(file_size)
        
        text = (
            f"**{escape_markdown(title)}** ({page + 1}/{total_files})\n\n"
            f"üìÅ **{escape_markdown(custom_name)}**{multipart_info}\n"
            f"üìã `{custom_name}`\n"
            f"üìä –†–∞–∑–º–µ—Ä: {size_str}\n"
        )
        
        if description:
            text += f"üìù {escape_markdown(description)}\n"
        
        text += f"üë§ {escape_markdown(uploader)}\n‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–π: {download_count}"
        
        # Navigation and action buttons
        keyboard = []
        
        # Action buttons
        keyboard.append([
            InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å", callback_data=f"download_{file_id}"),
            InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–º—è", callback_data=f"copy_name_{file_id}")
        ])
        
        # Navigation buttons
        nav_buttons = []
        if total_files > 1:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"search_page_{page-1}"))
            nav_buttons.append(InlineKeyboardButton(f"{page + 1}/{total_files}", callback_data="noop"))
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"search_page_{page+1}"))
            keyboard.append(nav_buttons)
        
        # Back button
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await message.reply_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def back_to_menu(self, query, context):
        """Return to main menu"""
        keyboard = [
            [InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data="upload")],
            [InlineKeyboardButton("üîó –°–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ", callback_data="url_download")],
            [InlineKeyboardButton("üì¶ –ú–Ω–æ–≥–æ—á–∞—Å—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞", callback_data="multipart_upload")],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤", callback_data="search")],
            [InlineKeyboardButton("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã", callback_data="recent")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üë§ –ú–æ–∏ —Ñ–∞–π–ª—ã", callback_data="my_files")]
        ]
        
        # Add admin panel for admin user
        if query.from_user.id == self.admin_id:
            keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = (
            "üóÉÔ∏è **–ê—Ä—Ö–∏–≤-–±–æ—Ç**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await query.edit_message_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # Clear any waiting states
        context.user_data.clear()
    
    async def test_download(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Test download functionality"""
        # Check antispam
        if not await self.check_antispam(update, "test"):
            return
        
        # Get the last uploaded file
        results = self.db.get_recent_files_grouped(limit=1)
        if not results:
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                reply_markup=reply_markup
            )
            return
        
        file_info = results[0]
        file_id = file_info[0]
        custom_name = file_info[2]
        
        keyboard = [
            [InlineKeyboardButton(f"üì• –°–∫–∞—á–∞—Ç—å {custom_name}", callback_data=f"download_{file_id}")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üß™ **–¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è**\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª: {escape_markdown(custom_name)}\nID: {file_id}",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Cancel current operation"""
        user_id = update.effective_user.id
        if user_id in self.user_upload_data:
            del self.user_upload_data[user_id]
        
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return ConversationHandler.END
    
    # ============ ADMIN FUNCTIONS ============
    
    def is_admin(self, user_id: int) -> bool:
        """Check if user is admin"""
        return user_id == self.admin_id
    
    async def show_admin_panel(self, query, context):
        """Show admin panel"""
        if not self.is_admin(query.from_user.id):
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        text = (
            "‚öôÔ∏è **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n"
            "üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
            "‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏\n"
            "‚Ä¢ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
            [InlineKeyboardButton("üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏", callback_data="admin_files")],
            [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤", callback_data="admin_cleanup")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def admin_broadcast_prompt(self, query, context):
        """Prompt admin for broadcast message"""
        if not self.is_admin(query.from_user.id):
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        text = (
            "üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞:\n\n"
            "üí° **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown —Ä–∞–∑–º–µ—Ç–∫–∞**"
        )
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
        context.user_data['waiting_for_broadcast'] = True
    
    async def admin_detailed_stats(self, query, context):
        """Show detailed admin statistics"""
        if not self.is_admin(query.from_user.id):
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        stats = self.db.get_admin_stats()
        
        text = (
            "üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
            f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** {stats.get('total_users', 0)}\n"
            f"üìÅ **–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:** {stats.get('total_files', 0)}\n"
            f"üíæ **–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:** {format_file_size(stats.get('total_size', 0))}\n"
            f"‚¨áÔ∏è **–í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π:** {stats.get('total_downloads', 0)}\n"
            f"üîó **–§–∞–π–ª–æ–≤ –∏–∑ URL:** {stats.get('url_files', 0)}\n"
            f"üì¶ **–ú–Ω–æ–≥–æ—á–∞—Å—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:** {stats.get('multipart_files', 0)}\n\n"
            f"üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:**\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('users_today', 0)}\n"
            f"‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {stats.get('files_today', 0)}\n"
            f"‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–π: {stats.get('downloads_today', 0)}"
        )
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def admin_user_management(self, query, context):
        """Show user management options"""
        if not self.is_admin(query.from_user.id):
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        users = self.db.get_top_users(limit=10)
        
        text = "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\nüìà **–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–≥—Ä—É–∑–∫–∞–º:**\n\n"
        
        for i, user in enumerate(users, 1):
            username = user[1] or user[2] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            files_count = user[3]
            text += f"{i}. {escape_markdown(username)} - {files_count} —Ñ–∞–π–ª–æ–≤\n"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def admin_file_management(self, query, context):
        """Show file management options"""
        if not self.is_admin(query.from_user.id):
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        large_files = self.db.get_largest_files(limit=10)
        
        text = "üìÅ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏**\n\nüìä **–°–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã:**\n\n"
        
        for i, file_info in enumerate(large_files, 1):
            filename = file_info[1]
            size = format_file_size(file_info[2])
            downloads = file_info[3]
            text += f"{i}. {escape_markdown(filename)} - {size} ({downloads} —Å–∫–∞—á–∏–≤–∞–Ω–∏–π)\n"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def admin_cleanup_files(self, query, context):
        """Show file cleanup options"""
        if not self.is_admin(query.from_user.id):
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        text = (
            "üßπ **–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤**\n\n"
            "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–∏—Ç —Ñ–∞–π–ª—ã –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "üóÇÔ∏è **–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏:**\n"
            "‚Ä¢ –§–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π\n"
            "‚Ä¢ –§–∞–π–ª—ã —Å 0 —Å–∫–∞—á–∏–≤–∞–Ω–∏–π —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π\n"
            "‚Ä¢ –§–∞–π–ª—ã –±–æ–ª—å—à–µ 1 –ì–ë —Å—Ç–∞—Ä—à–µ 14 –¥–Ω–µ–π\n\n"
            "üí° –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
        )
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle uploaded photos"""
        # Check antispam for file uploads
        if not await self.check_antispam(update, "upload_photo"):
            return
        
        user_id = update.effective_user.id
        photo = update.message.photo[-1]  # Get the largest photo
        
        # Create a document-like object for consistency
        class PhotoDocument:
            def __init__(self, photo):
                self.file_id = photo.file_id
                self.file_size = photo.file_size
                self.file_name = f"photo_{photo.file_unique_id}.jpg"
                self.mime_type = "image/jpeg"
        
        # Replace the photo with document-like object and process
        update.message.document = PhotoDocument(photo)
        await self.handle_document(update, context)
    
    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle uploaded videos"""
        # Check antispam for file uploads
        if not await self.check_antispam(update, "upload_video"):
            return
        
        user_id = update.effective_user.id
        video = update.message.video
        
        # Create a document-like object for consistency
        class VideoDocument:
            def __init__(self, video):
                self.file_id = video.file_id
                self.file_size = video.file_size
                self.file_name = video.file_name or f"video_{video.file_unique_id}.mp4"
                self.mime_type = video.mime_type or "video/mp4"
        
        # Replace the video with document-like object and process
        update.message.document = VideoDocument(video)
        await self.handle_document(update, context)
    
    async def handle_audio(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle uploaded audio files"""
        # Check antispam for file uploads
        if not await self.check_antispam(update, "upload_audio"):
            return
        
        user_id = update.effective_user.id
        audio = update.message.audio
        
        # Create a document-like object for consistency
        class AudioDocument:
            def __init__(self, audio):
                self.file_id = audio.file_id
                self.file_size = audio.file_size
                self.file_name = audio.file_name or f"audio_{audio.file_unique_id}.mp3"
                self.mime_type = audio.mime_type or "audio/mpeg"
        
        # Replace the audio with document-like object and process
        update.message.document = AudioDocument(audio)
        await self.handle_document(update, context)
    
    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle voice messages"""
        # Check antispam for file uploads
        if not await self.check_antispam(update, "upload_voice"):
            return
        
        user_id = update.effective_user.id
        voice = update.message.voice
        
        # Create a document-like object for consistency
        class VoiceDocument:
            def __init__(self, voice):
                self.file_id = voice.file_id
                self.file_size = voice.file_size
                self.file_name = f"voice_{voice.file_unique_id}.ogg"
                self.mime_type = voice.mime_type or "audio/ogg"
        
        # Replace the voice with document-like object and process
        update.message.document = VoiceDocument(voice)
        await self.handle_document(update, context)
    
    async def handle_video_note(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle video notes (–∫—Ä—É–≥–ª—ã–µ –≤–∏–¥–µ–æ)"""
        # Check antispam for file uploads
        if not await self.check_antispam(update, "upload_video_note"):
            return
        
        user_id = update.effective_user.id
        video_note = update.message.video_note
        
        # Create a document-like object for consistency
        class VideoNoteDocument:
            def __init__(self, video_note):
                self.file_id = video_note.file_id
                self.file_size = video_note.file_size
                self.file_name = f"video_note_{video_note.file_unique_id}.mp4"
                self.mime_type = "video/mp4"
        
        # Replace the video note with document-like object and process
        update.message.document = VideoNoteDocument(video_note)
        await self.handle_document(update, context)
    
    async def handle_broadcast_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle broadcast message from admin"""
        if not context.user_data.get('waiting_for_broadcast'):
            return
        
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        broadcast_text = update.message.text.strip()
        if not broadcast_text:
            await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        # Get all users
        users = self.db.get_all_users()
        
        sent_count = 0
        failed_count = 0
        
        status_msg = await update.message.reply_text("üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        
        for user_id, username, first_name, last_name in users:
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:**\n\n{broadcast_text}",
                    parse_mode=ParseMode.MARKDOWN
                )
                sent_count += 1
                
                # Update status every 10 messages
                if sent_count % 10 == 0:
                    await status_msg.edit_text(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{len(users)}")
                
            except Exception as e:
                logger.error(f"Failed to send broadcast to {user_id}: {e}")
                failed_count += 1
            
            # Small delay to avoid rate limits
            await asyncio.sleep(0.1)
        
        final_text = (
            f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"
        )
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await status_msg.edit_text(
            final_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
        context.user_data['waiting_for_broadcast'] = False
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Admin command handler"""
        # Check antispam (but admin is exempt)
        if not await self.check_antispam(update, "admin"):
            return
        
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # Create fake query for admin panel
        class FakeQuery:
            def __init__(self, user, message):
                self.from_user = user
                self.message = message
            
            async def edit_message_text(self, text, reply_markup=None, parse_mode=None):
                await self.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        
        fake_query = FakeQuery(update.effective_user, update.message)
        await self.show_admin_panel(fake_query, context)
    
    async def cleanup_antispam_data(self, context: ContextTypes.DEFAULT_TYPE):
        """Periodic cleanup of antispam data"""
        try:
            self.antispam.cleanup_old_data()
            logger.info("Antispam data cleanup completed")
        except Exception as e:
            logger.error(f"Error during antispam cleanup: {e}")
    
    # ===== CATEGORY METHODS =====
    
    async def show_categories(self, query, context):
        """Show all categories with enhanced interface"""
        categories = self.db.get_categories()
        
        # Calculate total files across all categories
        total_files = sum(files_count for _, _, _, _, files_count in categories)
        
        text = (
            "üìÇ **–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞—Ä—Ö–∏–≤–∞**\n\n"
            f"üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** {total_files} —Ñ–∞–π–ª–æ–≤ –≤ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö\n\n"
        )
        
        keyboard = []
        
        # Group categories by popularity (files count)
        popular_categories = []
        other_categories = []
        
        for category_id, name, description, icon, files_count in categories:
            category_info = (category_id, name, description, icon, files_count)
            if files_count > 0:
                popular_categories.append(category_info)
            else:
                other_categories.append(category_info)
        
        # Sort by files count (descending)
        popular_categories.sort(key=lambda x: x[4], reverse=True)
        
        # Show popular categories first
        if popular_categories:
            text += "üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n"
            for category_id, name, description, icon, files_count in popular_categories:
                text += f"{icon} **{name}** ‚Ä¢ {files_count} —Ñ–∞–π–ª–æ–≤\n"
                keyboard.append([
                    InlineKeyboardButton(f"{icon} {name}", callback_data=f"category_{category_id}"),
                    InlineKeyboardButton(f"üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å", callback_data=f"quick_upload_{category_id}")
                ])
            text += "\n"
        
        # Show empty categories
        if other_categories:
            text += "üìÅ **–ü—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n"
            empty_buttons = []
            for category_id, name, description, icon, files_count in other_categories:
                text += f"{icon} {name}\n"
                empty_buttons.append(InlineKeyboardButton(
                    f"{icon} {name}", 
                    callback_data=f"quick_upload_{category_id}"
                ))
            
            # Arrange empty categories in rows of 2
            for i in range(0, len(empty_buttons), 2):
                row = empty_buttons[i:i+2]
                keyboard.append(row)
        
        # Control buttons
        keyboard.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö", callback_data="search_categories")])
        
        # Add admin options for category management
        user_id = query.from_user.id
        if user_id == self.admin_id:
            keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="create_category")])
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def show_category_selection(self, query, context, action="upload"):
        """Show category selection for file upload"""
        categories = self.db.get_categories()
        
        text = "üìÇ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–∞**\n\n"
        keyboard = []
        
        for category_id, name, description, icon, files_count in categories:
            keyboard.append([InlineKeyboardButton(
                f"{icon} {name}", 
                callback_data=f"select_category_{category_id}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def show_category_files(self, query, context, category_id, page=1):
        """Show files in a specific category with enhanced interface"""
        category = self.db.get_category_by_id(category_id)
        if not category:
            await query.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        category_name = category[1]
        category_icon = category[3]
        category_desc = category[2]
        files_count = category[4]
        
        files = self.db.get_files_by_category(category_id, limit=10)
        
        # Breadcrumb navigation
        breadcrumb = f"üè† –ì–ª–∞–≤–Ω–∞—è > üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ > {category_icon} {category_name}"
        
        if not files:
            text = (
                f"{breadcrumb}\n\n"
                f"{category_icon} **{category_name}**\n"
                f"üí¨ _{category_desc}_\n\n"
                "üì≠ **–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤**\n\n"
                "üí° –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!"
            )
            keyboard = [
                [InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data=f"quick_upload_{category_id}")],
                [InlineKeyboardButton("üìÇ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"), 
                 InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="back_to_menu")]
            ]
        else:
            text = (
                f"{breadcrumb}\n\n"
                f"{category_icon} **{category_name}** ‚Ä¢ {files_count} —Ñ–∞–π–ª–æ–≤\n"
                f"üí¨ _{category_desc}_\n\n"
            )
            
            keyboard = []
            
            # Quick actions for category
            keyboard.append([
                InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å", callback_data=f"quick_upload_{category_id}"),
                InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data=f"search_in_category_{category_id}")
            ])
            
            # File list with enhanced display
            for i, file_info in enumerate(files, 1):
                file_id, telegram_file_id, custom_name, description, file_size, uploaded_at, download_count, username, first_name, cat_name, cat_icon = file_info
                
                size_str = format_file_size(file_size)
                uploader = username or first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                
                # File type emoji based on extension
                file_emoji = self.get_file_emoji(custom_name)
                
                text += f"{i}. {file_emoji} **{custom_name}**\n"
                text += f"   üìä {size_str} ‚Ä¢ üë§ {uploader} ‚Ä¢ üì• {download_count} —Å–∫–∞—á–∏–≤–∞–Ω–∏–π\n"
                if description:
                    text += f"   üí¨ _{description}_\n"
                text += "\n"
                
                # Enhanced file actions
                keyboard.append([
                    InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å", callback_data=f"download_{file_id}"),
                    InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"copy_name_{file_id}"),
                    InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data=f"file_info_{file_id}")
                ])
            
            # Navigation and actions
            keyboard.append([
                InlineKeyboardButton("üìÇ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"), 
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="back_to_menu")
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    def get_file_emoji(self, filename):
        """Get emoji based on file extension"""
        ext = filename.lower().split('.')[-1] if '.' in filename else ''
        
        emoji_map = {
            # Documents
            'pdf': 'üìÑ', 'doc': 'üìÑ', 'docx': 'üìÑ', 'txt': 'üìÑ', 'rtf': 'üìÑ',
            # Images
            'jpg': 'üñºÔ∏è', 'jpeg': 'üñºÔ∏è', 'png': 'üñºÔ∏è', 'gif': 'üñºÔ∏è', 'bmp': 'üñºÔ∏è', 'svg': 'üñºÔ∏è',
            # Videos
            'mp4': 'üé¨', 'avi': 'üé¨', 'mkv': 'üé¨', 'mov': 'üé¨', 'wmv': 'üé¨', 'flv': 'üé¨',
            # Audio
            'mp3': 'üéµ', 'wav': 'üéµ', 'flac': 'üéµ', 'aac': 'üéµ', 'ogg': 'üéµ',
            # Archives
            'zip': 'üì¶', 'rar': 'üì¶', '7z': 'üì¶', 'tar': 'üì¶', 'gz': 'üì¶',
            # Code
            'py': 'üíª', 'js': 'üíª', 'html': 'üíª', 'css': 'üíª', 'php': 'üíª', 'java': 'üíª',
            # Spreadsheets
            'xls': 'üìä', 'xlsx': 'üìä', 'csv': 'üìä',
            # Presentations
            'ppt': 'üìΩÔ∏è', 'pptx': 'üìΩÔ∏è'
        }
        
        return emoji_map.get(ext, 'üìÑ')
    
    async def create_category_prompt(self, query, context):
        """Prompt admin to create a new category"""
        if query.from_user.id != self.admin_id:
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", show_alert=True)
            return
        
        text = (
            "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`–ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | –≠–º–æ–¥–∑–∏`\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ `–ö—É—Ä—Å–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã | –ö—É—Ä—Å–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ —Ä–∞–±–æ—Ç—ã | üéì`\n"
            "‚Ä¢ `–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ | –õ–∏—á–Ω—ã–µ —Ñ–æ—Ç–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è | üì∏`\n"
            "‚Ä¢ `–ü—Ä–æ–≥—Ä–∞–º–º—ã | –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã | üíª`\n\n"
            "–û–ø–∏—Å–∞–Ω–∏–µ –∏ —ç–º–æ–¥–∑–∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã."
        )
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="categories")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
        context.user_data['creating_category'] = True
    
    async def handle_category_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle category creation from text input"""
        if update.effective_user.id != self.admin_id:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            return
        
        text = update.message.text.strip()
        parts = [part.strip() for part in text.split('|')]
        
        name = parts[0] if len(parts) > 0 else ""
        description = parts[1] if len(parts) > 1 else ""
        icon = parts[2] if len(parts) > 2 else "üìÅ"
        
        if not name:
            await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        try:
            category_id = self.db.create_category(name, description, icon, update.effective_user.id)
            
            keyboard = [[InlineKeyboardButton("üìÇ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
                f"{icon} **{name}**\n"
                f"üìù {description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
                f"üÜî ID: {category_id}",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"Error creating category: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            )
        
        # Clear the flag
        context.user_data.pop('creating_category', None)
    
    def run(self):
        """Run the bot"""
        token = os.getenv('BOT_TOKEN')
        if not token:
            raise ValueError("BOT_TOKEN not found in environment variables")
        
        # Create application
        application = Application.builder().token(token).build()
        
        # Add conversation handler for file upload
        upload_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Document.ALL, self.handle_document)],
            states={
                WAITING_FOR_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_file_name)],
                WAITING_FOR_DESCRIPTION: [MessageHandler(filters.TEXT, self.handle_file_description)],
            },
            fallbacks=[CommandHandler('cancel', self.cancel)],
        )
        
        # Add conversation handler for URL download
        url_download_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_input)],
            states={
                WAITING_FOR_URL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_url_file_name)],
                WAITING_FOR_URL_DESCRIPTION: [MessageHandler(filters.TEXT, self.handle_url_file_description)],
            },
            fallbacks=[CommandHandler('cancel', self.cancel)],
        )
        
        # Add handlers
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("admin", self.admin_command))
        application.add_handler(CommandHandler("test", self.test_download))
        application.add_handler(CallbackQueryHandler(self.button_handler))
        application.add_handler(upload_handler)
        application.add_handler(url_download_handler)
        
        # Add media handlers
        application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        application.add_handler(MessageHandler(filters.VIDEO, self.handle_video))
        application.add_handler(MessageHandler(filters.AUDIO, self.handle_audio))
        application.add_handler(MessageHandler(filters.VOICE, self.handle_voice))
        application.add_handler(MessageHandler(filters.VIDEO_NOTE, self.handle_video_note))
        
        # Add periodic antispam cleanup job (every 30 minutes) if JobQueue is available
        try:
            if application.job_queue:
                application.job_queue.run_repeating(
                    self.cleanup_antispam_data,
                    interval=1800,  # 30 minutes
                    first=300       # Start after 5 minutes
                )
                logger.info("Antispam cleanup job scheduled")
            else:
                logger.warning("JobQueue not available - antispam cleanup will be manual only")
        except Exception as e:
            logger.warning(f"Could not set up cleanup job: {e}")
        
        # Run the bot
        logger.info("Starting Archive Bot with Anti-Spam protection...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    bot = ArchiveBot()
    bot.run()
